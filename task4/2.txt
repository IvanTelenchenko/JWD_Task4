	Цикл for уже был представлен в главе 1, здесь же он рассматривается более подробно. Держу пари, что вас приятно удивит эффективность и гибкость этого цикла. Прежде всего обратимся к самым основным и традиционным формам цикла for. Ниже приведен общий синтаксис цикла for, применяемого для повторного выполнения единственной инструкции.
/*
for{инициализация; условие; итерация) инструкция;
*/
	А так выглядит его синтаксис для повторного выполнения блока кода.
/*
for {инициализация; условие; итерация)
{
последовательность инструкций;
}
*/
	Здесь инициализация, как правило, представлена оператором присваивания, задающим первоначальное значение управляющей переменной, которая играет роль счетчика цикла; условие — это логическое выражение, определяющее необходимость повторения цикла; а итерация — это выражение, определяющее величину, на которую должно изменяться значение управляющей переменной (на каждом шаге цикла). Обратите внимание на то, что эти три составные части определения цикла for должны быть разделены точкой с запятой. Выполнение цикла for будет продолжаться до тех пор, пока результат проверки условия будет истинным. Как только проверка даст ложный результат, цикл завершится, а выполнение программы будет продолжено с инструкции, следующей после цикла for. А теперь рассмотрим пример программы, где цикл for служит для вывода на экран значений квадратного корня чисел от 1 до 99. В данной программе отображается также ошибка округления, допущенная при вычислении квадратного корня.
/*
// Вывод квадратных корней чисел от 1 до 99
// вместе с ошибкой округления
class SqrRoot {
	public static void main(String args[]) {
		double num, sroot, rerr;
		for(num = 1.0; num < 100.0; num++) {
			sroot = Math.sqrt(num);
			System.out.printIn("Корень квадратный из " + num + " равен " + sroot);
			// Вычисление ошибки округления
			rerr = num - (sroot * sroot);
			System.out.println("Ошибка округления: " + rerr);
			System.out.println();
		}
	}
}
*/
	Обратите внимание на то, что ошибка округления вычисляется путем возведения в квадрат квадратного корня числа. Полученное значение вычитается из исходного числа. Значение переменной цикла может увеличиваться либо уменьшаться, а величина приращения может выбираться произвольно. Например, в приведенном ниже фрагменте кода выводятся числа от 100 до —95, и на каждом шаге значение переменной цикла уменьшается на 5.
/*
// Цикл for, выполняющийся с отрицательным приращением переменной
class DecrFor {
	public static void main(String args[]) {
		int x;
		for(x = 100; х > -100; х -= 5) ◄ -------На каждой итерации переменная цикла уменьшается на 5
			System, out. println(x);
	}
}
*/
	В отношении циклов for следует особо подчеркнуть, что условие всегда проверяется в самом начале цикла. Это означает, что код в цикле может вообще не выполняться, если проверяемое условие с самого начала оказывается ложным. Рассмотрим следующий пример.
/*
for(count=10; count < 5; count++)
	x += count; // эта инструкция не будет выполнена
*/
	Этот цикл вообще не будет выполняться, поскольку первоначальное значение переменной count, которая им управляет, сразу же оказывается больше 5. А это означает, что условное выражение count < 5 оказывается ложным с самого начала, т.е. еще до выполнения первого шага цикла for for for for for.
